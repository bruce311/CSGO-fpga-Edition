--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=10 LPM_WIDTH=4 data eq
--VERSION_BEGIN 17.0 cbx_cycloneii 2017:04:25:18:06:29:SJ cbx_lpm_add_sub 2017:04:25:18:06:29:SJ cbx_lpm_compare 2017:04:25:18:06:29:SJ cbx_lpm_decode 2017:04:25:18:06:29:SJ cbx_mgl 2017:04:25:18:09:28:SJ cbx_nadder 2017:04:25:18:06:30:SJ cbx_stratix 2017:04:25:18:06:30:SJ cbx_stratixii 2017:04:25:18:06:30:SJ  VERSION_END


-- Copyright (C) 2017  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Intel and sold by Intel or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.



--synthesis_resources = lut 16 
SUBDESIGN decode_g2a
( 
	data[3..0]	:	input;
	eq[9..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire1	: WIRE;
	enable_wire2	: WIRE;
	eq_node[9..0]	: WIRE;
	eq_wire1w[7..0]	: WIRE;
	eq_wire2w[7..0]	: WIRE;
	w_anode2209w[3..0]	: WIRE;
	w_anode2226w[3..0]	: WIRE;
	w_anode2236w[3..0]	: WIRE;
	w_anode2246w[3..0]	: WIRE;
	w_anode2256w[3..0]	: WIRE;
	w_anode2266w[3..0]	: WIRE;
	w_anode2276w[3..0]	: WIRE;
	w_anode2286w[3..0]	: WIRE;
	w_anode2296w[3..0]	: WIRE;
	w_anode2307w[3..0]	: WIRE;
	w_anode2317w[3..0]	: WIRE;
	w_anode2327w[3..0]	: WIRE;
	w_anode2337w[3..0]	: WIRE;
	w_anode2347w[3..0]	: WIRE;
	w_anode2357w[3..0]	: WIRE;
	w_anode2367w[3..0]	: WIRE;

BEGIN 
	data_wire[2..0] = data[2..0];
	enable_wire1 = (! data[3..3]);
	enable_wire2 = data[3..3];
	eq[] = eq_node[];
	eq_node[] = ( eq_wire2w[1..0], eq_wire1w[]);
	eq_wire1w[] = ( w_anode2286w[3..3], w_anode2276w[3..3], w_anode2266w[3..3], w_anode2256w[3..3], w_anode2246w[3..3], w_anode2236w[3..3], w_anode2226w[3..3], w_anode2209w[3..3]);
	eq_wire2w[] = ( w_anode2367w[3..3], w_anode2357w[3..3], w_anode2347w[3..3], w_anode2337w[3..3], w_anode2327w[3..3], w_anode2317w[3..3], w_anode2307w[3..3], w_anode2296w[3..3]);
	w_anode2209w[] = ( (w_anode2209w[2..2] & (! data_wire[2..2])), (w_anode2209w[1..1] & (! data_wire[1..1])), (w_anode2209w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode2226w[] = ( (w_anode2226w[2..2] & (! data_wire[2..2])), (w_anode2226w[1..1] & (! data_wire[1..1])), (w_anode2226w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode2236w[] = ( (w_anode2236w[2..2] & (! data_wire[2..2])), (w_anode2236w[1..1] & data_wire[1..1]), (w_anode2236w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode2246w[] = ( (w_anode2246w[2..2] & (! data_wire[2..2])), (w_anode2246w[1..1] & data_wire[1..1]), (w_anode2246w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode2256w[] = ( (w_anode2256w[2..2] & data_wire[2..2]), (w_anode2256w[1..1] & (! data_wire[1..1])), (w_anode2256w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode2266w[] = ( (w_anode2266w[2..2] & data_wire[2..2]), (w_anode2266w[1..1] & (! data_wire[1..1])), (w_anode2266w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode2276w[] = ( (w_anode2276w[2..2] & data_wire[2..2]), (w_anode2276w[1..1] & data_wire[1..1]), (w_anode2276w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode2286w[] = ( (w_anode2286w[2..2] & data_wire[2..2]), (w_anode2286w[1..1] & data_wire[1..1]), (w_anode2286w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode2296w[] = ( (w_anode2296w[2..2] & (! data_wire[2..2])), (w_anode2296w[1..1] & (! data_wire[1..1])), (w_anode2296w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode2307w[] = ( (w_anode2307w[2..2] & (! data_wire[2..2])), (w_anode2307w[1..1] & (! data_wire[1..1])), (w_anode2307w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode2317w[] = ( (w_anode2317w[2..2] & (! data_wire[2..2])), (w_anode2317w[1..1] & data_wire[1..1]), (w_anode2317w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode2327w[] = ( (w_anode2327w[2..2] & (! data_wire[2..2])), (w_anode2327w[1..1] & data_wire[1..1]), (w_anode2327w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode2337w[] = ( (w_anode2337w[2..2] & data_wire[2..2]), (w_anode2337w[1..1] & (! data_wire[1..1])), (w_anode2337w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode2347w[] = ( (w_anode2347w[2..2] & data_wire[2..2]), (w_anode2347w[1..1] & (! data_wire[1..1])), (w_anode2347w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode2357w[] = ( (w_anode2357w[2..2] & data_wire[2..2]), (w_anode2357w[1..1] & data_wire[1..1]), (w_anode2357w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode2367w[] = ( (w_anode2367w[2..2] & data_wire[2..2]), (w_anode2367w[1..1] & data_wire[1..1]), (w_anode2367w[0..0] & data_wire[0..0]), enable_wire2);
END;
--VALID FILE
